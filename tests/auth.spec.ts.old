import { test, expect } from '@playwright/test';

test.describe('Authentication', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  test('should display login page by default', async ({ page }) => {
    await expect(page).toHaveURL(/\/login/);
    await expect(page.locator('h3')).toContainText('Welcome back');
    await expect(page.locator('input[type="email"]')).toBeVisible();
    await expect(page.locator('input[type="password"]')).toBeVisible();
    await expect(page.locator('button[type="submit"]')).toContainText('Sign In');
  });

  test('should navigate to register page', async ({ page }) => {
    await page.click('text=Sign up');
    await expect(page).toHaveURL(/\/register/);
    await expect(page.locator('h3')).toContainText('Create an account');
    await expect(page.locator('input[placeholder="John Doe"]')).toBeVisible();
    await expect(page.locator('input[type="email"]')).toBeVisible();
    await expect(page.locator('input[type="password"]')).toBeVisible();
  });

  test('should register a new user', async ({ page }) => {
    const timestamp = Date.now();
    const testEmail = `test${timestamp}@example.com`;
    
    await page.click('text=Sign up');
    await page.fill('input[placeholder="John Doe"]', 'Test User');
    await page.fill('input[type="email"]', testEmail);
    await page.fill('input[type="password"]', 'TestPassword123!');
    await page.click('button[type="submit"]');
    
    await expect(page).toHaveURL(/\/$/, { timeout: 10000 });
    await expect(page.locator('h1:has-text("Dashboard")')).toBeVisible();
  });

  test('should login with valid credentials', async ({ page }) => {
    const timestamp = Date.now();
    const testEmail = `test${timestamp}@example.com`;
    const testPassword = 'TestPassword123!';
    
    // First register
    await page.click('text=Sign up');
    await page.fill('input[placeholder="John Doe"]', 'Test User');
    await page.fill('input[type="email"]', testEmail);
    await page.fill('input[type="password"]', testPassword);
    await page.click('button[type="submit"]');
    await page.waitForURL(/\/$/);
    
    // Logout
    await page.click('button:has-text("Logout")');
    await page.waitForURL(/\/login/);
    
    // Login
    await page.fill('input[type="email"]', testEmail);
    await page.fill('input[type="password"]', testPassword);
    await page.click('button[type="submit"]');
    
    await expect(page).toHaveURL(/\/$/, { timeout: 10000 });
    await expect(page.locator('h1:has-text("Dashboard")')).toBeVisible();
  });

  test.skip('should show error for invalid credentials', async ({ page }) => {
    await page.fill('input[type="email"]', 'invalid@example.com');
    await page.fill('input[type="password"]', 'wrongpassword');
    await page.click('button[type="submit"]');
    
    const errorMessage = page.locator('text=Invalid credentials');
    await expect(errorMessage).toBeVisible({ timeout: 10000 });
  });

  test('should logout successfully', async ({ page }) => {
    const timestamp = Date.now();
    const testEmail = `test${timestamp}@example.com`;
    
    // Register and login
    await page.click('text=Sign up');
    await page.fill('input[placeholder="John Doe"]', 'Test User');
    await page.fill('input[type="email"]', testEmail);
    await page.fill('input[type="password"]', 'TestPassword123!');
    await page.click('button[type="submit"]');
    await page.waitForURL(/\/$/);
    
    // Logout
    await page.click('button:has-text("Logout")');
    
    await expect(page).toHaveURL(/\/login/);
    await expect(page.locator('h3')).toContainText('Welcome back');
  });

  test('should persist session on page refresh', async ({ page }) => {
    const timestamp = Date.now();
    const testEmail = `test${timestamp}@example.com`;
    
    // Register
    await page.click('text=Sign up');
    await page.fill('input[placeholder="John Doe"]', 'Test User');
    await page.fill('input[type="email"]', testEmail);
    await page.fill('input[type="password"]', 'TestPassword123!');
    await page.click('button[type="submit"]');
    await page.waitForURL(/\/$/);
    
    // Refresh page
    await page.reload();
    
    // Should still be on dashboard
    await expect(page).toHaveURL(/\/$/);
    await expect(page.locator('h1:has-text("Dashboard")')).toBeVisible();
  });
});