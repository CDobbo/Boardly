name: Build Validation

# Trigger on every push to main branch
on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger from GitHub UI

jobs:
  # Frontend build and validation
  frontend:
    name: Frontend Build & Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run TypeScript compiler check
        working-directory: ./frontend
        run: npx tsc --noEmit
        continue-on-error: true # Don't fail on TS errors for now
      
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint || true # Don't fail on lint errors for now
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: Check build output exists
        run: |
          if [ ! -d "frontend/build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          echo "✅ Frontend build successful!"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # Backend build and validation
  backend:
    name: Backend Build & Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Check JavaScript syntax
        working-directory: ./backend
        run: node --check src/index.js
      
      - name: Validate all route files
        working-directory: ./backend
        run: |
          echo "Checking route files syntax..."
          for file in src/routes/*.js; do
            echo "Checking $file"
            node --check "$file"
          done
      
      - name: Validate middleware files
        working-directory: ./backend
        run: |
          echo "Checking middleware files syntax..."
          for file in src/middleware/*.js; do
            echo "Checking $file"
            node --check "$file"
          done
      
      - name: Test database initialization
        working-directory: ./backend
        run: |
          echo "Testing database initialization..."
          node -e "import('./src/db/init.js').then(() => { console.log('✅ Database init successful'); process.exit(0); }).catch(err => { console.error('❌ Database init failed:', err); process.exit(1); })"
      
      - name: Run ESLint (if available)
        working-directory: ./backend
        run: |
          if [ -f ".eslintrc.json" ] || [ -f ".eslintrc.js" ]; then
            npx eslint src/ || true
          else
            echo "No ESLint config found, skipping..."
          fi

  # Security and dependency checks
  security-check:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Audit frontend dependencies
        working-directory: ./frontend
        run: |
          echo "🔍 Auditing frontend dependencies..."
          npm audit --audit-level=high || true
          echo "---"
      
      - name: Audit backend dependencies
        working-directory: ./backend
        run: |
          echo "🔍 Auditing backend dependencies..."
          npm audit --audit-level=high || true
          echo "---"
      
      - name: Check for outdated packages (Frontend)
        working-directory: ./frontend
        run: |
          echo "📦 Checking for outdated frontend packages..."
          npm outdated || true
          echo "---"
      
      - name: Check for outdated packages (Backend)
        working-directory: ./backend
        run: |
          echo "📦 Checking for outdated backend packages..."
          npm outdated || true
          echo "---"

  # Summary job that requires all others to pass
  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [frontend, backend, security-check]
    if: always()
    
    steps:
      - name: Check build results
        run: |
          echo "## Build Validation Summary"
          echo ""
          if [ "${{ needs.frontend.result }}" == "success" ]; then
            echo "✅ Frontend: Build successful"
          else
            echo "❌ Frontend: Build failed"
          fi
          
          if [ "${{ needs.backend.result }}" == "success" ]; then
            echo "✅ Backend: Build successful"
          else
            echo "❌ Backend: Build failed"
          fi
          
          if [ "${{ needs.security-check.result }}" == "success" ]; then
            echo "✅ Security: Checks passed"
          else
            echo "⚠️ Security: Checks need attention"
          fi
          
          # Fail if any critical job failed
          if [ "${{ needs.frontend.result }}" != "success" ] || [ "${{ needs.backend.result }}" != "success" ]; then
            echo ""
            echo "❌ Build validation failed!"
            exit 1
          else
            echo ""
            echo "✅ All build validations passed!"
          fi